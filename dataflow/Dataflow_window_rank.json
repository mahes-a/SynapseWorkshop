{
	"name": "Dataflow_window_rank",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sourcelkp"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn"
				},
				{
					"name": "select"
				},
				{
					"name": "aggregate"
				},
				{
					"name": "windowlag"
				},
				{
					"name": "join"
				},
				{
					"name": "compose",
					"flowlet": {
						"referenceName": "FLW_GreenTaxi",
						"type": "DataFlowReference"
					}
				}
			],
			"scriptLines": [
				"source(output(",
				"          LocationID as short,",
				"          Borough as string,",
				"          Zone as string,",
				"          service_zone as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'synpswrkshp',",
				"     fileName: 'taxizonelookup.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> sourcelkp",
				"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
				"select derive(pickupdate = toDate(lpep_pickup_datetime)) ~> derivedColumn",
				"join select(mapColumn(",
				"          lpep_pickup_datetime,",
				"          PULocationID,",
				"          DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          tip_amount,",
				"          total_amount,",
				"          pickupborough = Borough",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"derivedColumn aggregate(groupBy(pickupdate,",
				"          PULocationID,",
				"          pickupborough),",
				"     trip_distance = sum(trip_distance),",
				"          total_amount = sum(total_amount),",
				"          tip_amount = sum(tip_amount)) ~> aggregate",
				"aggregate window(over(pickupdate),",
				"     desc(total_amount, true),",
				"     rank = rank(),",
				"     partitionBy('hash', 1)) ~> windowlag",
				"compose@output, sourcelkp join(PULocationID == LocationID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"windowlag sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'Output',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}