{
	"name": "Dataflow_Gold_StarSchema",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "source"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "select"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "selectdimpickup"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          PU_Borough as string,",
				"          PU_Zone as string,",
				"          PU_service_zone as string,",
				"          DO_Borough as string,",
				"          Do_Zone as string,",
				"          DO_service_zone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'silver/nycgreentaxienhanced') ~> source",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          PU_Borough as string,",
				"          PU_Zone as string,",
				"          PU_service_zone as string,",
				"          DO_Borough as string,",
				"          Do_Zone as string,",
				"          DO_service_zone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'silver/nycgreentaxienhanced') ~> source1",
				"source select(mapColumn(",
				"          VendorID,",
				"          lpep_pickup_datetime,",
				"          lpep_dropoff_datetime,",
				"          PULocationID,",
				"          DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          tip_amount,",
				"          total_amount,",
				"          PU_Borough,",
				"          PU_Zone,",
				"          PU_service_zone,",
				"          DO_Borough,",
				"          Do_Zone,",
				"          DO_service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select derive(pickupdate = toDate(lpep_pickup_datetime)) ~> derivedColumn",
				"source1 select(mapColumn(",
				"          PULocationID,",
				"          PU_Borough,",
				"          PU_Zone,",
				"          PU_service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdimpickup",
				"derivedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'gold/nyctaxifact',",
				"     compressionCodec: 'snappy',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          pickupdate",
				"     )) ~> sink"
			]
		}
	}
}