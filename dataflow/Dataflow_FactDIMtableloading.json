{
	"name": "Dataflow_FactDIMtableloading",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "source3"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorageWorkshop",
						"type": "LinkedServiceReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "selectdimpickup"
				},
				{
					"name": "DistinctRows1"
				},
				{
					"name": "selectdimdropoff"
				},
				{
					"name": "DistinctRows"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "select3"
				},
				{
					"name": "surrogateKey3"
				},
				{
					"name": "join1"
				},
				{
					"name": "select4"
				},
				{
					"name": "join2"
				},
				{
					"name": "select5"
				},
				{
					"name": "join3"
				},
				{
					"name": "select6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          PU_Borough as string,",
				"          PU_Zone as string,",
				"          PU_service_zone as string,",
				"          DO_Borough as string,",
				"          Do_Zone as string,",
				"          DO_service_zone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'silver/nycgreentaxienhanced') ~> source1",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          PU_Borough as string,",
				"          PU_Zone as string,",
				"          PU_service_zone as string,",
				"          DO_Borough as string,",
				"          Do_Zone as string,",
				"          DO_service_zone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'silver/nycgreentaxienhanced') ~> source2",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          PU_Borough as string,",
				"          PU_Zone as string,",
				"          PU_service_zone as string,",
				"          DO_Borough as string,",
				"          Do_Zone as string,",
				"          DO_service_zone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'silver/nycgreentaxienhanced') ~> source3",
				"source(output(",
				"          VendorID as short,",
				"          VendorDescription as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'synpswrkshp',",
				"     fileName: 'vendoridlkp.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source4",
				"source1 select(mapColumn(",
				"          PULocationID,",
				"          PU_Borough,",
				"          PU_Zone,",
				"          PU_service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdimpickup",
				"selectdimpickup aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> DistinctRows1",
				"source2 select(mapColumn(",
				"          DOLocationID,",
				"          DO_Borough,",
				"          Do_Zone,",
				"          DO_service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdimdropoff",
				"selectdimdropoff aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> DistinctRows",
				"DistinctRows1 select(mapColumn(",
				"          PULocationID,",
				"          PU_Borough,",
				"          PU_Zone,",
				"          PU_service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"DistinctRows select(mapColumn(",
				"          DOLocationID,",
				"          DO_Borough,",
				"          Do_Zone,",
				"          DO_service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 keyGenerate(output(pickupsurrogate as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"select2 keyGenerate(output(dropoffsurrogatekey as long),",
				"     startAt: 100L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"source3 select(mapColumn(",
				"          VendorID,",
				"          lpep_pickup_datetime,",
				"          lpep_dropoff_datetime,",
				"          PULocationID,",
				"          DOLocationID,",
				"          trip_distance,",
				"          fare_amount,",
				"          tip_amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source4 keyGenerate(output(vendorsurrogate as long),",
				"     startAt: 1000L,",
				"     stepValue: 1L) ~> surrogateKey3",
				"select3, surrogateKey1 join(select3@PULocationID == select1@PULocationID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          VendorID,",
				"          lpep_pickup_datetime,",
				"          lpep_dropoff_datetime,",
				"          DOLocationID,",
				"          trip_distance,",
				"          fare_amount,",
				"          tip_amount,",
				"          pickupsurrogate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, surrogateKey2 join(select4@DOLocationID == select2@DOLocationID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          VendorID,",
				"          lpep_pickup_datetime,",
				"          lpep_dropoff_datetime,",
				"          trip_distance,",
				"          fare_amount,",
				"          tip_amount,",
				"          pickupsurrogate,",
				"          dropoffsurrogatekey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5, surrogateKey3 join(select5@VendorID == source4@VendorID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          lpep_pickup_datetime,",
				"          lpep_dropoff_datetime,",
				"          trip_distance,",
				"          fare_amount,",
				"          tip_amount,",
				"          pickupsurrogate,",
				"          dropoffsurrogatekey,",
				"          vendorsurrogate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'gold/dimpickupsurrogate',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"surrogateKey2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'gold/dimdropoffsurrogate',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"surrogateKey3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'gold/dimvendorsurrogate',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"select6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'synpswrkshp',",
				"     folderPath: 'gold/nyctaxifact',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4"
			]
		}
	}
}